How to use this solution:

    0) Assuming you have make, md5sum, g++, pdflatex, Python, and SymPy
       installed, you can build the PDF documentation and a test program
       called 'check' by running 'make'.
    1) Review the generated 'writeup.pdf' to familiarize yourself with the
       solution.
    2) Run 'check' and review the relative errors shown to convince yourself
       the C++ code in nsctpl_fwd.hpp and nsctpl.hpp correctly implements the
       manufactured solution and the associated manufactured forcing.  Results
       are shown for float, double, and long double computations.
    3) Use nsctpl_fwd.hpp and nsctpl.hpp in your code by #include-ing them
       verbatim into your code.  See the top of nsctpl_fwd.hpp for some
       details and check.cpp for how you might use the provided classes.

Documentation:

    README:      This file
    writeup.tex: Discussion of the model and the manufactured solution
    soln.py:     Generates C code for the solution and its derivatives
                 Included by writeup.tex
    forcing.py:  Step-by-step details of computing the necessary forcing
                 Included by writeup.tex

Implementation:

    nsctpl_fwd.hpp:  C++ header file with forward declarations for the
                     manufactured solution.  Code written to allow
                     #include-ing from some other file, possibly within an
                     anonymous namespace.  No double-inclusion guards present.
    nsctpl.hpp:      C++ header file containing templated implementation
                     details for nsctpl.hpp based upon output of running
                     soln.py.  Similar #include comments apply.

Tests:

    test.py:         Using Sympy, computes high precision results for
                     a particular set of solution coefficients using
                     'soln.py' and 'forcing.py'.  Results saved into
                     test.hpp and employed in check.cpp.
    check.cpp:       Very simple driver used to ensure nsctpl.hpp compiles
                     at several different precisions and behaves sanely.
                     Checks that ensure C++ implementation matches
                     writeup.tex/soln.py/forcing.py to acceptable tolerance.
